/// @file     main.cpp
/// @author   Erik ZORZIN
/// @date     30AUG2021
/// @brief    Single 1/2 spinor in 2D.

#define INTEROP        true                                                                          // "true" = use OpenGL-OpenCL interoperability.
#define SX             800                                                                           // Window x-size [px].
#define SY             600                                                                           // Window y-size [px].
#define NA             "Neutrino - Spinor_2D"                                                        // Window name.
#define OX             0.0f                                                                          // x-axis orbit initial rotation.
#define OY             0.0f                                                                          // y-axis orbit initial rotation.
#define PX             0.0f                                                                          // x-axis pan initial translation.
#define PY             0.0f                                                                          // y-axis pan initial translation.
#define PZ             -2.0f                                                                         // z-axis pan initial translation.
#define ROT            0.01f                                                                         // Spinor rotation factor.
#define SPINOR_SCALE   0.99f                                                                         // Spinor scale factor.
#define FRONTIER_SCALE 0.9995f                                                                       // Boundary scale factor.


#ifdef __linux__
  #define SHADER_HOME  "../../Code/shader/"                                                          // Linux OpenGL shaders directory.
  #define KERNEL_HOME  "../../Code/kernel/"                                                          // Linux OpenCL kernels directory.
  #define GMSH_HOME    "../../Code/mesh/"                                                            // Linux GMSH mesh directory.
#endif

#ifdef WIN32
  #define SHADER_HOME  "..\\..\\Code\\shader\\"                                                      // Windows OpenGL shaders directory.
  #define KERNEL_HOME  "..\\..\\Code\\kernel\\"                                                      // Windows OpenCL kernels directory.
  #define GMSH_HOME    "..\\..\\Code\\mesh\\"                                                        // Linux GMSH mesh directory.
#endif

#define SHADER_VERT    "voxel_vertex.vert"                                                           // OpenGL vertex shader.
#define SHADER_GEOM    "voxel_geometry.geom"                                                         // OpenGL geometry shader.
#define SHADER_FRAG    "voxel_fragment.frag"                                                         // OpenGL fragment shader.
#define OVERLAY_VERT   "overlay_vertex.vert"                                                         // OpenGL vertex shader.
#define OVERLAY_GEOM   "overlay_geometry.geom"                                                       // OpenGL geometry shader.
#define OVERLAY_FRAG   "overlay_fragment.frag"                                                       // OpenGL fragment shader.
#define KERNEL_1       "spinor_kernel_1.cl"                                                          // OpenCL kernel source.
#define KERNEL_2       "spinor_kernel_2.cl"                                                          // OpenCL kernel source.
#define KERNEL_3       "spinor_kernel_3.cl"                                                          // OpenCL kernel source.
#define KERNEL_4       "spinor_kernel_4.cl"                                                          // OpenCL kernel source.
#define UTILITIES      "utilities.cl"                                                                // OpenCL utilities source.
#define MESH_FILE      "spacetime.msh"                                                               // GMSH mesh.
#define MESH           GMSH_HOME MESH_FILE                                                           // GMSH mesh (full path).

// INCLUDES:
#include "nu.hpp"                                                                                    // Neutrino header file.
//#include <string>

void addSlider (
                std::string description,
                std::string unit,
                std::string name,
                float*      value,
                float       min_value,
                float       max_value
               )
{
  ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                     // Setting text color...
  ImGui::Text (description.c_str ());                                                                // Writing text...
  ImGui::PopStyleColor ();                                                                           // Restoring text color...
  ImGui::SameLine ();                                                                                // Staying on same line...
  ImGui::Text (unit.c_str ());                                                                       // Writing text...
  ImGui::SameLine ();                                                                                // Staying on same line...
  ImGui::SliderFloat (name.c_str (), value, min_value, max_value);                                   // Adding input field...
}

void addParameter (
                   std::string description,
                   std::string unit,
                   std::string name,
                   float*      value
                  )
{
  ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                     // Setting text color...
  ImGui::Text (description.c_str ());                                                                // Writing text...
  ImGui::PopStyleColor ();                                                                           // Restoring text color...
  ImGui::SameLine ();                                                                                // Staying on same line...
  ImGui::Text (unit.c_str ());                                                                       // Writing text...
  ImGui::SameLine ();                                                                                // Staying on same line...
  ImGui::InputFloat (name.c_str (), value);                                                          // Adding input field...
}

int main ()
{
  // INDEXES:
  GLuint                           i;                                                                // Index [#].
  GLuint                           j;                                                                // Index [#].

  // MOUSE PARAMETERS:
  float                            ms_orbit_rate  = 1.0f;                                            // Orbit rotation rate [rev/s].
  float                            ms_pan_rate    = 5.0f;                                            // Pan translation rate [m/s].
  float                            ms_decaytime   = 1.25f;                                           // Pan LP filter decay time [s].

  // GAMEPAD PARAMETERS:
  float                            gmp_orbit_rate = 1.0f;                                            // Orbit angular rate coefficient [rev/s].
  float                            gmp_pan_rate   = 1.0f;                                            // Pan translation rate [m/s].
  float                            gmp_decaytime  = 1.25f;                                           // Low pass filter decay time [s].
  float                            gmp_deadzone   = 0.30f;                                           // Gamepad joystick deadzone [0...1].

  // OPENGL:
  nu::opengl*                      gl             = new nu::opengl (NA, SX, SY, OX, OY, PX, PY, PZ); // OpenGL context.
  nu::shader*                      shader_1       = new nu::shader ();                               // OpenGL shader program.
  nu::projection_mode              proj_mode      = nu::MONOCULAR;                                   // OpenGL projection mode.

  // OPENCL:
  nu::opencl*                      cl             = new nu::opencl (nu::GPU);                        // OpenCL context.
  nu::kernel*                      kernel_1       = new nu::kernel ();                               // OpenCL kernel array.
  nu::kernel*                      kernel_2       = new nu::kernel ();                               // OpenCL kernel array.
  nu::kernel*                      kernel_3       = new nu::kernel ();                               // OpenCL kernel array.
  nu::kernel*                      kernel_4       = new nu::kernel ();                               // OpenCL kernel array.

  nu::float4*                      position       = new nu::float4 (0);                              // vec4(position.xyz [m], freedom []).
  nu::float4*                      position_int   = new nu::float4 (1);                              // vec4(position (intermediate) [m], radiative energy [J]).
  nu::float4*                      velocity       = new nu::float4 (2);                              // vec4(velocity.xyz [m/s], friction [N*s/m]).
  nu::float4*                      velocity_int   = new nu::float4 (3);                              // Velocity (intermediate) [m/s].
  nu::float4*                      acceleration   = new nu::float4 (4);                              // vec4(acceleration.xyz [m/s^2], mass [kg]).

  nu::float4*                      color          = new nu::float4 (5);                              // vec4(color.xyz [], alpha []).
  nu::float1*                      stiffness      = new nu::float1 (6);                              // Stiffness.
  nu::float1*                      resting        = new nu::float1 (7);                              // Resting.
  nu::int1*                        central        = new nu::int1 (8);                                // Central nodes.
  nu::int1*                        neighbour      = new nu::int1 (9);                                // Neighbour.
  nu::int1*                        offset         = new nu::int1 (10);                               // Offset.

  nu::int1*                        spinor         = new nu::int1 (11);                               // Spinor.
  nu::int1*                        spinor_num     = new nu::int1 (12);                               // Spinor cells number.
  nu::float4*                      spinor_pos     = new nu::float4 (13);                             // Spinor cells position.
  nu::int1*                        frontier       = new nu::int1 (14);                               // Spacetime frontier.
  nu::int1*                        frontier_num   = new nu::int1 (15);                               // Frontier nodes number.
  nu::float4*                      frontier_pos   = new nu::float4 (16);                             // Frontier nodes position.

  nu::float1*                      dispersion     = new nu::float1 (17);                             // Dispersion fraction [-0.5...1.0].
  nu::float1*                      dt             = new nu::float1 (18);                             // Time step [s].

  // MESH:
  // MESH:
  nu::mesh*                        spacetime      = new nu::mesh (MESH);                             // Spacetime mesh.
  size_t                           nodes          = 0;                                               // Number of nodes.
  size_t                           elements       = 0;                                               // Number of elements.
  size_t                           groups         = 0;                                               // Number of groups.
  size_t                           neighbours     = 0;                                               // Number of neighbours.
  size_t                           frontier_nodes = 0;                                               // Number of frontier nodes.
  int                              ABCD           = 13;                                              // "ABCD" surface tag.
  int                              EFGH           = 14;                                              // "EFGH" surface tag.
  int                              ADHE           = 15;                                              // "ADHE" surface tag.
  int                              BCGF           = 16;                                              // "BCGF" surface tag.
  int                              ABFE           = 17;                                              // "ABFE" surface tag.
  int                              DCGH           = 18;                                              // "DCGH" surface tag.
  int                              VOLUME         = 1;                                               // Entire volume tag.
  std::vector<int>                 boundary;                                                         // Boundary array.
  float                            px;
  float                            py;
  float                            pz;
  float                            px_new;
  float                            py_new;
  float                            pz_new;

  // SIMULATION VARIABLES:
  float                            safety_CFL     = 0.5f;                                            // Courant-Friedrichs-Lewy safety coefficient [].
  int                              N              = 3;                                               // Number of spatial dimensions of the MSM [].
  float                            rho            = 1.0E-2f;                                         // Mass density [kg/m^3].
  float                            E              = 1.0E-2f;                                         // Young's modulus [Pa];
  float                            ni             = 0.2f;                                            // Poisson's ratio [];
  float                            beta           = 1.0E-4f;                                         // Damping [kg*s*m].
  int                              R              = 1;                                               // Particle's radius [#cells].

  float                            ds;                                                               // Cell size [m].
  float                            dV;                                                               // Cell Volume [m^3].
  float                            k;                                                                // Spring constant [N/m].
  float                            K;                                                                // Bulk modulus [Pa].
  float                            v_p;                                                              // Speed of P-waves [m/s].
  float                            v_s;                                                              // Speed of S-waves [m/s].
  float                            dm;                                                               // Node mass [kg].
  float                            lambda;                                                           // Lamé 1st parameter [Pa].
  float                            mu;                                                               // Lamé 2nd parameter (S-wave modulus) [Pa].
  float                            M;                                                                // P-wave modulus [Pa].
  float                            B;                                                                // Dispersive pressure [Pa].
  float                            Q;                                                                // Dispersive to direct momentum flow ratio [].
  float                            C;                                                                // Interaction momentum carriers pressure [Pa].
  float                            D;                                                                // Dispersion fraction [-0.5...1.0].
  float                            dt_CFL;                                                           // Courant-Friedrichs-Lewy critical time step [s].
  float                            dt_SIM;                                                           // Simulation time step [s].

  // BACKUP:
  std::vector<nu_float4_structure> initial_position;                                                 // Backing up initial data...
  std::vector<nu_float4_structure> initial_position_int;                                             // Backing up initial data...
  std::vector<nu_float4_structure> initial_velocity;                                                 // Backing up initial data...
  std::vector<nu_float4_structure> initial_velocity_int;                                             // Backing up initial data...
  std::vector<nu_float4_structure> initial_acceleration;                                             // Backing up initial data...
  std::vector<nu_float4_structure> initial_spinor_pos;                                               // Backing up initial data...
  std::vector<nu_float4_structure> initial_frontier_pos;                                             // Backing up initial data...

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  ///////////////////////////////////////// DATA INITIALIZATION ///////////////////////////////////////
  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // MESH:
  spacetime->process (VOLUME, N, nu::MSH_HEX_8);                                                     // Processing mesh...
  position->data  = spacetime->node_coordinates;                                                     // Setting all node coordinates...
  neighbour->data = spacetime->neighbour;                                                            // Setting neighbour indices...
  central->data   = spacetime->neighbour_center;                                                     // Setting neighbour centers...
  offset->data    = spacetime->neighbour_offset;                                                     // Setting neighbour offsets...
  resting->data   = spacetime->neighbour_length;                                                     // Setting resting distances...
  nodes           = spacetime->node.size ();                                                         // Getting the number of nodes...
  elements        = spacetime->element.size ();                                                      // Getting the number of elements...
  groups          = spacetime->group.size ();                                                        // Getting the number of groups...
  neighbours      = spacetime->neighbour.size ();                                                    // Getting the number of neighbours...
  ds              = *std::min_element (std::begin (resting->data), std::end (resting->data));        // Getting cell size...

  dV              = (float)pow (ds, N);                                                              // Computing cell volume...
  dm              = rho*dV;                                                                          // Computing node mass...
  lambda          = (E*ni)/((ni + 1.0f)*(ni - N*ni + 1.0f));                                         // Computing 1st Lamé parameter...
  mu              = E/(2.0f*ni + 2.0f);                                                              // Computing 2nd Lamé parameter (S-wave modulus)...
  M               = E*(1.0f - ni)/((ni + 1.0f)*(ni - N*ni + 1.0f));                                  // Computing P-wave modulus...
  B               = lambda - mu;                                                                     // Computing dispersive pressure...
  Q               = B/(mu*(1.0f + 2.0f/N));                                                          // Computing dispersive to direct momentum flow ratio...
  C               = mu + mu*abs (Q);                                                                 // Computing interaction momentum carriers pressure...
  D               = Q/(1.0f + abs (Q));                                                              // Computing dispersion fraction...
  k               = 5.0f/(2.0f + 4.0f*sqrt (2.0f))*mu*ds;                                            // Computing spring constant...
  K               = E/(N + N*ni - (float)pow (N, 2)*ni);                                             // Computing bulk modulus...
  v_p             = sqrt (abs (M/rho));                                                              // Computing speed of P-waves...
  v_s             = sqrt (abs (mu/rho));                                                             // Computing speed of S-waves...
  dt_CFL          = ds/(N*(v_p + v_s));                                                              // Computing Courant-Friedrichs-Lewy critical time step [s]...
  dt_SIM          = safety_CFL*dt_CFL;                                                               // Setting simulation time step [s]...

  // SETTING NEUTRINO ARRAYS (parameters):
  dispersion->data.push_back (D);                                                                    // Setting dispersion fraction...
  dt->data.push_back (dt_SIM);                                                                       // Setting time step...

  // SETTING NEUTRINO ARRAYS ("nodes" depending):
  for(i = 0; i < nodes; i++)
  {
    position->data[i].w = 1.0f;                                                                      // Setting freedom flag...
    position_int->data.push_back ({0.0f, 0.0f, 0.0f, 0.0f});                                         // Setting intermediate position...
    velocity->data.push_back ({0.0f, 0.0f, 0.0f, beta});                                             // Setting velocity...
    velocity_int->data.push_back ({0.0f, 0.0f, 0.0f, 0.0f});                                         // Setting intermediate velocity...
    acceleration->data.push_back ({0.0f, 0.0f, 0.0f, dm});                                           // Setting acceleration...

    // Finding spinor:
    if(
       sqrt (
             pow (position->data[i].x, 2) +
             pow (position->data[i].y, 2) +
             pow (position->data[i].z, 2)
            ) < (sqrt (3.0f)*ds/2.0f + FLT_EPSILON)
      )
    /*if(
       ((-0.01f - 3*ds) < position->data[i].x) &&
       (position->data[i].x < (0.01f + 3*ds)) &&
       ((-0.01f - 3*ds) < position->data[i].y) &&
       (position->data[i].y < (0.01f + 3*ds)) &&
       ((-0.01f - 3*ds) < position->data[i].z) &&
       (position->data[i].z < (0.01f + 3*ds))
       )*/
    {
      spinor->data.push_back (i);                                                                    // Setting spinor index...
      spinor_pos->data.push_back (position->data[i]);                                                // Setting initial spinor's position...
      position->data[i].w = 0.0f;                                                                    // Resetting freedom flag...
    }
  }

  spinor_num->data.push_back ((GLint)spinor->data.size ());

  // SETTING NEUTRINO ARRAYS ("neighbours" depending):
  for(i = 0; i < neighbours; i++)
  {
    // Building 3D isotropic 18-node cubic MSM:
    if(resting->data[i] < (sqrt (2.0f)*ds + FLT_EPSILON))
    {
      stiffness->data.push_back (k);                                                                 // Setting 1st and 2nd nearest neighbour link stiffness...
    }
    else
    {
      stiffness->data.push_back (0.0f);                                                              // Setting 3rd nearest neighbour link stiffness...
    }

    // Showing only 1st neighbours:
    if(resting->data[i] < (ds + FLT_EPSILON))
    {
      color->data.push_back ({0.0f, 1.0f, 0.0f, 0.3f});                                              // Setting color...
    }
    else
    {
      color->data.push_back ({0.0f, 0.0f, 0.0f, 0.0f});                                              // Setting color...
    }
  }

  // SETTING MESH PHYSICAL CONSTRAINTS:
  //boundary.push_back (ABCD);                                                                         // Setting boundary surface...
  //boundary.push_back (EFGH);                                                                         // Setting boundary surface...
  boundary.push_back (ADHE);                                                                         // Setting boundary surface...
  boundary.push_back (BCGF);                                                                         // Setting boundary surface...
  boundary.push_back (ABFE);                                                                         // Setting boundary surface...
  boundary.push_back (DCGH);                                                                         // Setting boundary surface...

  for(i = 0; i < boundary.size (); i++)
  {
    spacetime->process (boundary[i], 2, nu::MSH_PNT);                                                // Processing mesh...
    frontier->data.insert (
                           frontier->data.end (),
                           spacetime->node.begin (),
                           spacetime->node.end ()
                          );                                                                         // Getting nodes on the spacetime frontier...

    frontier_nodes += spacetime->node.size ();                                                       // Getting the number of nodes on the spacetime frontier...
  }

  for(j = 0; j < frontier_nodes; j++)
  {
    position->data[frontier->data[j]].w = 0.0f;                                                      // Resetting freedom flag...
    frontier_pos->data.push_back (position->data[frontier->data[j]]);
  }

  frontier_num->data.push_back ((GLint)frontier_nodes);

  // SETTING INITIAL DATA BACKUP:
  initial_position     = position->data;                                                             // Setting backup data...
  initial_position_int = position_int->data;                                                         // Setting backup data...
  initial_velocity     = velocity->data;                                                             // Setting backup data...
  initial_velocity_int = velocity_int->data;                                                         // Setting backup data...
  initial_acceleration = acceleration->data;                                                         // Setting backup data...
  initial_spinor_pos   = spinor_pos->data;                                                           // Setting backup data...
  initial_frontier_pos = frontier_pos->data;                                                         // Setting backup data...

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////// OPENCL KERNELS INITIALIZATION /////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  kernel_1->addsource (std::string (KERNEL_HOME) + std::string (UTILITIES));                         // Setting kernel source file...
  kernel_1->addsource (std::string (KERNEL_HOME) + std::string (KERNEL_1));                          // Setting kernel source file...
  kernel_1->build (nodes, 0, 0);                                                                     // Building kernel program...
  kernel_2->addsource (std::string (KERNEL_HOME) + std::string (UTILITIES));                         // Setting kernel source file...
  kernel_2->addsource (std::string (KERNEL_HOME) + std::string (KERNEL_2));                          // Setting kernel source file...
  kernel_2->build (nodes, 0, 0);                                                                     // Building kernel program...
  kernel_3->addsource (std::string (KERNEL_HOME) + std::string (UTILITIES));                         // Setting kernel source file...
  kernel_3->addsource (std::string (KERNEL_HOME) + std::string (KERNEL_3));                          // Setting kernel source file...
  kernel_3->build (nodes, 0, 0);                                                                     // Building kernel program...
  kernel_4->addsource (std::string (KERNEL_HOME) + std::string (UTILITIES));                         // Setting kernel source file...
  kernel_4->addsource (std::string (KERNEL_HOME) + std::string (KERNEL_4));                          // Setting kernel source file...
  kernel_4->build (nodes, 0, 0);                                                                     // Building kernel program...

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  //////////////////////////////////// OPENGL SHADERS INITIALIZATION /////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  shader_1->addsource (std::string (SHADER_HOME) + std::string (SHADER_VERT), nu::VERTEX);           // Setting shader source file...
  shader_1->addsource (std::string (SHADER_HOME) + std::string (SHADER_GEOM), nu::GEOMETRY);         // Setting shader source file...
  shader_1->addsource (std::string (SHADER_HOME) + std::string (SHADER_FRAG), nu::FRAGMENT);         // Setting shader source file...
  shader_1->build (neighbours);                                                                      // Building shader program...

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////// SETTING OPENCL KERNEL ARGUMENTS /////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  cl->write ();

  int pressure = 0;

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////// APPLICATION LOOP ////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  while(!gl->closed ())                                                                              // Opening window...
  {
    cl->get_tic ();                                                                                  // Getting "tic" [us]...
    cl->write (13);                                                                                  // Writing spinor position...
    cl->write (16);                                                                                  // Writing frontier position...
    cl->acquire ();                                                                                  // Acquiring variables...
    cl->execute (kernel_1, nu::WAIT);                                                                // Executing OpenCL kernel...
    cl->execute (kernel_2, nu::WAIT);                                                                // Executing OpenCL kernel...
    cl->execute (kernel_3, nu::WAIT);                                                                // Executing OpenCL kernel...
    cl->execute (kernel_4, nu::WAIT);                                                                // Executing OpenCL kernel...
    cl->release ();                                                                                  // Releasing variables...

    gl->begin ();                                                                                    // Beginning gl...
    gl->poll_events ();                                                                              // Polling gl events...
    gl->mouse_navigation (ms_orbit_rate, ms_pan_rate, ms_decaytime);                                 // Mouse navigation...
    gl->gamepad_navigation (gmp_orbit_rate, gmp_pan_rate, gmp_decaytime, gmp_deadzone);              // Gamepad navigation...
    gl->plot (shader_1, proj_mode);                                                                  // Plotting shared arguments...

    ImGui::Begin ("2D-SPINOR PARAMETERS", NULL, ImGuiWindowFlags_AlwaysAutoResize);                  // Beginning window...
    ImGui::PushItemWidth (200);                                                                      // Setting window width [px]...

    addParameter ("Mass density:      ", "[kg/m^3]", " = rho", &rho);
    addParameter ("Young's modulus:   ", "[Pa]    ", " = E", &E);
    addParameter ("Poisson's ratio:   ", "[]      ", " = ni", &ni);
    addParameter ("Damping:           ", "[kg*s*m]", " = beta", &beta);

    dm     = rho*dV;                                                                                 // Computing node mass...
    lambda = (E*ni)/((ni + 1.0f)*(ni - N*ni + 1.0f));                                                // Computing 1st Lamé parameter...
    mu     = E/(2.0f*ni + 2.0f);                                                                     // Computing 2nd Lamé parameter (S-wave modulus)...
    M      = E*(1.0f - ni)/((ni + 1.0f)*(ni - N*ni + 1.0f));                                         // Computing P-wave modulus...
    B      = lambda - mu;                                                                            // Computing dispersive pressure...
    Q      = B/(mu*(1.0f + 2.0f/N));                                                                 // Computing dispersive to direct momentum flow ratio...
    C      = mu + mu*abs (Q);                                                                        // Computing interaction momentum carriers pressure...
    D      = Q/(1.0f + abs (Q));                                                                     // Computing dispersion fraction...
    k      = 5.0f/(2.0f + 4.0f*sqrt (2.0f))*mu*ds;                                                   // Computing spring constant...
    K      = E/(N + N*ni - (float)pow (N, 2)*ni);                                                    // Computing bulk modulus...
    v_p    = sqrt (abs (M/rho));                                                                     // Computing speed of P-waves...
    v_s    = sqrt (abs (mu/rho));                                                                    // Computing speed of S-waves...
    dt_CFL = ds/(N*(v_p + v_s));                                                                     // Computing Courant-Friedrichs-Lewy critical time step [s]...
    dt_SIM = safety_CFL*dt_CFL;                                                                      // Setting simulation time step [s]...

    if(ImGui::Button ("(U)pdate") || gl->key_U)
    {
      // SETTING NEUTRINO ARRAYS ("nodes" depending):
      for(i = 0; i < nodes; i++)
      {
        velocity->data[i].w = beta;                                                                  // Setting friction...
      }

      cl->write (2);                                                                                 // Writing vec4(velocity.xyz [m/s], friction [N*s/m])...

      // SETTING NEUTRINO ARRAYS ("neighbours" depending):
      for(i = 0; i < neighbours; i++)
      {
        // Building 3D isotropic 18-node cubic MSM:
        if(resting->data[i] < (sqrt (2.0f)*ds + FLT_EPSILON))
        {
          stiffness->data[i] = k;                                                                    // Setting 1st and 2nd nearest neighbour link stiffness...
        }
        else
        {
          stiffness->data[i] = 0.0f;                                                                 // Setting 3rd nearest neighbour link stiffness...
        }
      }

      cl->write (6);                                                                                 // Updating stiffness...
    }

    ImGui::SameLine (100);

    if(ImGui::Button ("(R)estart") || gl->button_TRIANGLE || gl->key_R)
    {
      position->data     = initial_position;                                                         // Restoring backup...
      position_int->data = initial_position_int;                                                     // Restoring backup...
      velocity->data     = initial_velocity;                                                         // Restoring backup...
      velocity_int->data = initial_velocity_int;                                                     // Restoring backup...
      acceleration->data = initial_acceleration;                                                     // Restoring backup...
      spinor_pos->data   = initial_spinor_pos;                                                       // Restoring backup...
      frontier_pos->data = initial_frontier_pos;                                                     // Restoring backup...

      // SETTING NEUTRINO ARRAYS ("nodes" depending):
      for(i = 0; i < nodes; i++)
      {
        velocity->data[i].w = beta;                                                                  // Setting friction...
      }

      cl->write (2);                                                                                 // Writing vec4(velocity.xyz [m/s], friction [N*s/m])...

      // SETTING NEUTRINO ARRAYS ("neighbours" depending):
      for(i = 0; i < neighbours; i++)
      {
        // Building 3D isotropic 18-node cubic MSM:
        if(resting->data[i] < (sqrt (2.0f)*ds + FLT_EPSILON))
        {
          stiffness->data[i] = k;                                                                    // Setting 1st and 2nd nearest neighbour link stiffness...
        }
        else
        {
          stiffness->data[i] = 0.0f;                                                                 // Setting 3rd nearest neighbour link stiffness...
        }
      }

      cl->write (0);                                                                                 // Writing vec4(position.xyz [m], freedom [])...
      cl->write (1);                                                                                 // Writing vec4(position (intermediate) [m], radiative energy [J])...
      cl->write (3);                                                                                 // Writing velocity (intermediate) [m/s]...
      cl->write (4);                                                                                 // Writing vec4(acceleration.xyz [m/s^2], mass [kg])...
      cl->write (6);                                                                                 // Writing stiffness...
      cl->write (13);                                                                                // Writing spinor cells position...
      cl->write (16);                                                                                // Writing frontier nodes position...
    }

    ImGui::SameLine (200);

    if(ImGui::Button ("(M)onocular") || gl->key_M)
    {
      proj_mode = nu::MONOCULAR;                                                                     // Setting monocular projection...
    }

    ImGui::SameLine (300);

    if(ImGui::Button ("(B)inocular") || gl->key_B)
    {
      proj_mode = nu::BINOCULAR;                                                                     // Setting binocular projection...
    }

    ImGui::SameLine (400);

    if(ImGui::Button ("(E)xit") || gl->button_CROSS || gl->key_E)
    {
      gl->close ();                                                                                  // Closing gl...
    }

    if(gl->button_DPAD_LEFT)
    {
      for(i = 0; i < (GLuint)spinor_num->data[0]; i++)
      {
        px                    = spinor_pos->data[i].x;
        py                    = spinor_pos->data[i].y;

        px_new                = +cos (ROT)*px - sin (ROT)*py;
        py_new                = +sin (ROT)*px + cos (ROT)*py;

        spinor_pos->data[i].x = px_new;
        spinor_pos->data[i].y = py_new;
      }
    }

    if(gl->button_DPAD_RIGHT)
    {
      for(i = 0; i < (GLuint)spinor_num->data[0]; i++)
      {
        px                    = spinor_pos->data[i].x;
        py                    = spinor_pos->data[i].y;

        px_new                = +cos (ROT)*px + sin (ROT)*py;
        py_new                = -sin (ROT)*px + cos (ROT)*py;

        spinor_pos->data[i].x = px_new;
        spinor_pos->data[i].y = py_new;
      }
    }

    /*
       if(gl->button_DPAD_DOWN)
       {
       for(i = 0; i < (GLuint)spinor_num->data[0]; i++)
       {
        py                    = spinor_pos->data[i].y;
        pz                    = spinor_pos->data[i].z;

        py_new                = +cos (ROT)*py - sin (ROT)*pz;
        pz_new                = +sin (ROT)*py + cos (ROT)*pz;

        spinor_pos->data[i].y = py_new;
        spinor_pos->data[i].z = pz_new;
       }
       }

       if(gl->button_DPAD_UP)
       {
       for(i = 0; i < (GLuint)spinor_num->data[0]; i++)
       {
        py                    = spinor_pos->data[i].y;
        pz                    = spinor_pos->data[i].z;

        py_new                = +cos (ROT)*py + sin (ROT)*pz;
        pz_new                = -sin (ROT)*py + cos (ROT)*pz;

        spinor_pos->data[i].y = py_new;
        spinor_pos->data[i].z = pz_new;
       }
       }
     */

    if(gl->button_LEFT_BUMPER)
    {
      for(i = 0; i < (GLuint)spinor_num->data[0]; i++)
      {
        px                    = spinor_pos->data[i].x;
        py                    = spinor_pos->data[i].y;
        //pz                    = spinor_pos->data[i].z;

        px_new                = px*SPINOR_SCALE;
        py_new                = py*SPINOR_SCALE;
        //pz_new                = pz*SPINOR_SCALE;

        spinor_pos->data[i].x = px_new;
        spinor_pos->data[i].y = py_new;
        //spinor_pos->data[i].z = pz_new;
      }
    }

    if(gl->button_RIGHT_BUMPER)
    {
      for(i = 0; i < (GLuint)spinor_num->data[0]; i++)
      {
        px                    = spinor_pos->data[i].x;
        py                    = spinor_pos->data[i].y;
        //pz                    = spinor_pos->data[i].z;

        px_new                = px/SPINOR_SCALE;
        py_new                = py/SPINOR_SCALE;
        //pz_new                = pz/SPINOR_SCALE;

        spinor_pos->data[i].x = px_new;
        spinor_pos->data[i].y = py_new;
        //spinor_pos->data[i].z = pz_new;
      }
    }

    if(gl->button_SQUARE)
    {
      for(i = 0; i < (GLuint)frontier_num->data[0]; i++)
      {
        px                      = frontier_pos->data[i].x;
        py                      = frontier_pos->data[i].y;
        //pz                      = frontier_pos->data[i].z;

        px_new                  = px*FRONTIER_SCALE;
        py_new                  = py*FRONTIER_SCALE;
        //pz_new                  = pz*FRONTIER_SCALE;

        frontier_pos->data[i].x = px_new;
        frontier_pos->data[i].y = py_new;
        //frontier_pos->data[i].z = pz_new;

        pressure--;
      }
    }

    if(gl->button_CIRCLE)
    {
      for(i = 0; i < (GLuint)frontier_num->data[0]; i++)
      {
        px                      = frontier_pos->data[i].x;
        py                      = frontier_pos->data[i].y;
        //pz                      = frontier_pos->data[i].z;

        px_new                  = px/FRONTIER_SCALE;
        py_new                  = py/FRONTIER_SCALE;
        //pz_new                  = pz/FRONTIER_SCALE;

        frontier_pos->data[i].x = px_new;
        frontier_pos->data[i].y = py_new;
        //frontier_pos->data[i].z = pz_new;

        pressure++;
      }
    }

    ImGui::End ();                                                                                  // Finishing window...

    // "DERIVED LATTICE PARAMETER" window:
    ImGui::Begin ("DERIVED LATTICE PARAMETERS", NULL, ImGuiWindowFlags_AlwaysAutoResize);           // Beginning window...
    ImGui::PushItemWidth (400);                                                                     // Setting window width [px]...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Cell size:                                  ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("ds         = %f [m]", ds);                                                        // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Cell volume:                                ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("dV         = %f [m^3]", dV);                                                      // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Node mass:                                  ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("dm         = %f [kg]", dm);                                                       // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Spring constant:                            ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("k          = %f [N/m]", k);                                                       // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Internal pressure:                          ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("P          = %d [N/m^2]", pressure);                                              // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Lame's 1st parameter:                       ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("lambda     = %f [Pa]", lambda);                                                   // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("S-wave modulus (Lame's 2nd parameter):      ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("mu         = %f [Pa]", mu);                                                       // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("P-wave modulus:                             ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("M          = %f [Pa]", M);                                                        // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Dispersive pressure:                        ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("B          = %f [Pa]", B);                                                        // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Dispersive-to-direct momentum flow ratio:   ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("Q          = %f []", Q);                                                          // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Interaction momentum carriers pressure:     ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("C          = %f [Pa]", C);                                                        // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Dispersion fraction:                        ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("D          = %f []", D);                                                          // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Bulk modulus:                               ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("K          = %f [Pa]", K);                                                        // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Speed of S-waves:                           ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("v_s        = %f [m/s]", v_s);                                                     // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Speed of P-waves:                           ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("v_p        = %f [m/s]", v_p);                                                     // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Courant-Friedrichs-Lewy critical time step: ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("dt_CFL     = %f [s]", dt_CFL);                                                    // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Courant-Friedrichs-Lewy safety coefficient: ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("safety_CFL = %f []", safety_CFL);                                                 // Writing text...

    ImGui::PushStyleColor (ImGuiCol_Text, IM_COL32 (0,255,0,255));                                  // Setting text color...
    ImGui::Text ("Simulation time step:                       ");                                   // Writing text...
    ImGui::PopStyleColor ();                                                                        // Restoring text color...
    ImGui::SameLine ();                                                                             // Staying on same line...
    ImGui::Text ("dt_sim     = %f [s]", dt_SIM);                                                    // Writing text...

    ImGui::End ();                                                                                  // Finishing window...

    gl->end ();                                                                                     // Ending gl...
    cl->get_toc ();                                                                                 // Getting "toc" [us]...
  }

  ////////////////////////////////////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////// CLEANUP ////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////
  delete cl;                                                                                        // Deleting OpenCL context...
  delete position;                                                                                  // Deleting position data...
  delete position_int;                                                                              // Deleting intermediate position data...
  delete velocity;                                                                                  // Deleting velocity data...
  delete velocity_int;                                                                              // Deleting intermediate velocity data...
  delete acceleration;                                                                              // Deleting acceleration data...
  delete color;                                                                                     // Deleting color data...
  delete stiffness;                                                                                 // Deleting stiffness data...
  delete resting;                                                                                   // Deleting resting data...
  delete central;                                                                                   // Deleting central...
  delete neighbour;                                                                                 // Deleting neighbours...
  delete offset;                                                                                    // Deleting offset...
  delete spinor;                                                                                    // Deleting spinor...
  delete spinor_num;                                                                                // Deleting spinor_num...
  delete spinor_pos;                                                                                // Deleting spinor_pos...
  delete frontier;                                                                                  // Deleting frontier...
  delete frontier_num;                                                                              // Deleting frontier_num...
  delete frontier_pos;                                                                              // Deleting frontier_pos...
  delete dt;                                                                                        // Deleting time step data...
  delete kernel_1;                                                                                  // Deleting OpenCL kernel...
  delete kernel_2;                                                                                  // Deleting OpenCL kernel...
  delete kernel_3;                                                                                  // Deleting OpenCL kernel...
  delete kernel_4;                                                                                  // Deleting OpenCL kernel...
  delete shader_1;                                                                                  // Deleting OpenGL shader...
  delete spacetime;                                                                                 // Deleting spacetime mesh...
  delete cl;                                                                                        // Deleting OpenCL...
  delete gl;                                                                                        // Deleting OpenGL...

  return 0;
}